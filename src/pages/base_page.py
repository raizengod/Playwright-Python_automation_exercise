import os
import time
import logging
from datetime import datetime
from typing import Union, Optional, Dict, Any, List

from playwright.sync_api import Page, Dialog, Locator, Error, TimeoutError

# --- Importaci√≥n de las nuevas clases de acciones ---
from .actions_elementos import ElementActions
from .actions_tablas import TableActions
from .actions_archivos import FileActions
from .actions_dialogos import DialogActions
from .actions_dropdowns import DropdownActions
from .actions_teclado import KeyboardActions
from .actions_navegacion import NavigationActions

# Aseg√∫rate de importar la clase de localizadores
from src.locators.locator_home import HomeLocatorsPage
"""from src.locators.locator_registro import RegistroLocatorsPage
from src.locators.locator_login import LoginLocatorsPage
from src.locators.locator_dashboard import DasboardLocatorsPage"""

class BasePage:
    """
    Clase base que act√∫a como un agregador para todas las clases de acciones.
    Inicializa la p√°gina, el logger y todas las clases de acciones espec√≠ficas,
    proporcionando un punto de entrada √∫nico y organizado para las pruebas.
    """

    #1- Creamos una funci√≥n incial 'Constructor'-----ES IMPORTANTE TENER ESTE INICIADOR-----
    def __init__(self, page: Page, config_data: dict, logger: logging.Logger):
        """
        Inicializa la clase Funciones_Globales con un objeto Page de Playwright.

        Args:
            page (Page): El objeto de p√°gina de Playwright que representa la pesta√±a
                         del navegador activa.
        """
        self.page = page
        self.logger = logger
        self.config_data = config_data
        
        # --- Banderas para manejo de eventos de di√°logo ---
        self._alerta_detectada = False
        self._alerta_mensaje_capturado = ""
        self._alerta_tipo_capturado = ""
        self._alerta_input_capturado = ""
        
        # --- Banderas para manejo de nuevas pesta√±as (popups) ---
        self._all_new_pages_opened_by_click: List[Page] = []
        self.page.context.on("page", self._on_new_page)
        
        # --- Instanciaci√≥n de las clases de acciones (mejora de arquitectura) ---
        self.element = ElementActions(self)
        self.table = TableActions(self)
        self.file = FileActions(self)
        self.dialog = DialogActions(self)
        self.dropdown = DropdownActions(self)
        self.keyboard = KeyboardActions(self)
        self.navigation = NavigationActions(self)
        
        # --- Instancia de la clase de localizadores de la p√°gina de inicio ---
        self.home = HomeLocatorsPage(self.page)
        """self.registro = RegistroLocatorsPage(self.page)
        self.login = LoginLocatorsPage(self.page)
        self.dashboard = DasboardLocatorsPage(self.page)"""
        
    #2- Funci√≥n para generar el nombre de archivo con marca de tiempo
    def _generar_nombre_archivo_con_timestamp(self, prefijo):
        now = datetime.now()
        timestamp = now.strftime("%Y-%m-%d_%H-%M-%S-%f")[:-3] # Quita los √∫ltimos 3 d√≠gitos para milisegundos m√°s precisos
        return f"{timestamp}_{prefijo}"
    
    #3- Funci√≥n para tomar captura de pantalla
    def tomar_captura(self, nombre_base, directorio):
        """
        Toma una captura de pantalla de la p√°gina y la guarda en el directorio especificado.
        Por defecto, usa SCREENSHOT_DIR de config.py.

        Args:
            nombre_base (str): El nombre base para el archivo de la captura de pantalla.
            directorio (str): El directorio donde se guardar√° la captura. Por defecto, SCREENSHOT_DIR.
        """
        try:
            if not os.path.exists(directorio):
                os.makedirs(directorio)
                self.logger.info(f"\n Directorio creado para capturas de pantalla: {directorio}") #

            nombre_archivo = self._generar_nombre_archivo_con_timestamp(nombre_base) #
            ruta_completa = os.path.join(directorio, f"{nombre_archivo}.png") # Cambiado a .png para mejor calidad
            self.page.screenshot(path=ruta_completa) #
            self.logger.info(f"\n üì∏ Captura de pantalla guardada en: {ruta_completa}") #
        except Exception as e:
            self.logger.error(f"\n ‚ùå Error al tomar captura de pantalla '{nombre_base}': {e}") #
        
    #4- unci√≥n basica para tiempo de espera que espera recibir el parametro tiempo
    #En caso de no pasar el tiempo por parametro, el mismo tendra un valor de medio segundo
    def esperar_fijo(self, tiempo=0.5):
        """
        Espera un tiempo fijo en segundos.

        Args:
            tiempo (Union[int, float]): El tiempo en segundos a esperar. Por defecto, 0.5 segundos.
        """
        self.logger.debug(f"\n Esperando fijo por {tiempo} segundos...") #
        try:
            time.sleep(tiempo) #
            self.logger.info(f"Espera fija de {tiempo} segundos completada.") #
        except TypeError:
            self.logger.error(f"\n ‚ùå Error: El tiempo de espera debe ser un n√∫mero. Se recibi√≥: {tiempo}") #
        except Exception as e:
            self.logger.error(f"\n ‚ùå Ocurri√≥ un error inesperado durante la espera fija: {e}") #
        
    #5- Funci√≥n para indicar el tiempo que se tardar√° en hacer el scroll
    def scroll_pagina(self, horz, vert, tiempo: Union[int, float] = 0.5):
        """
        Realiza un scroll en la p√°gina.

        Args:
            horz (int): Cantidad de scroll horizontal. Por defecto, 0.
            vert (int): Cantidad de scroll vertical. Por defecto, 0.
            tiempo (Union[int, float]): Tiempo de espera despu√©s del scroll en segundos. Por defecto, 0.5.
        """
        self.logger.debug(f"Realizando scroll - Horizontal: {horz}, Vertical: {vert}. Espera: {tiempo} segundos.") #
        try:
            # --- Medici√≥n de rendimiento: Inicio de la acci√≥n de scroll ---
            start_time_scroll_action = time.time()
            self.page.mouse.wheel(horz, vert)
            # --- Medici√≥n de rendimiento: Fin de la acci√≥n de scroll ---
            end_time_scroll_action = time.time()
            duration_scroll_action = end_time_scroll_action - start_time_scroll_action
            self.logger.info(f"PERFORMANCE: Duraci√≥n de la acci√≥n de scroll (Playwright API): {duration_scroll_action:.4f} segundos.")
            
            self.esperar_fijo(tiempo) # Reutiliza la funci√≥n esperar_fijo para el log y manejo de errores
            self.logger.info(f"Scroll completado (H: {horz}, V: {vert}).") #
        except Exception as e:
            self.logger.error(f"‚ùå Error al realizar scroll en la p√°gina: {e}") #
    
    #79- Funci√≥n para indicar el tiempo que se tardar√° en hacer el scroll en pagina movil
    def scroll_pangina_tactil(self, vert: int, nombre_base: str, directorio: str, tiempo_deslizamiento_ms: int = 500) -> None:
        """
        Realiza un scroll vertical simulando un gesto t√°ctil de deslizamiento (swipe).
        Esta funci√≥n est√° optimizada para dispositivos m√≥viles y tabletas.

        Args:
            vert (int): La cantidad de p√≠xeles a desplazar verticalmente. Un valor positivo
                        se desliza hacia arriba (mostrando contenido de abajo), y un valor negativo
                        se desliza hacia abajo (mostrando contenido de arriba).
            nombre_base (str): Nombre base para las capturas de pantalla si hay un error.
            directorio (str): Ruta del directorio para guardar las capturas.
            tiempo_deslizamiento_ms (int): Duraci√≥n del gesto de deslizamiento en milisegundos.
                                        Un valor m√°s alto simula un deslizamiento m√°s lento.
        """
        nombre_paso = f"Desplazamiento t√°ctil (Swipe) vertical: {vert} p√≠xeles"
        self.logger.info(f"\n--- {nombre_paso} ---")

        # --- Medici√≥n de rendimiento: Inicio de la acci√≥n de scroll t√°ctil ---
        start_time = time.time()
        
        # Define un punto fijo en la pantalla para el inicio y el fin del gesto.
        # Se usa 500 como punto de referencia para el ancho (centro) y se ajusta la altura.
        start_x = 500
        
        # Puntos de inicio y fin para el gesto de deslizamiento
        # Un valor 'vert' positivo simula un swipe de abajo hacia arriba.
        # Un valor 'vert' negativo simula un swipe de arriba hacia abajo.
        start_y = 500
        end_y = 500 + vert
        
        self.logger.debug(f"\n Simulando swipe desde ({start_x}, {start_y}) a ({start_x}, {end_y})")

        try:
            # 1. Toca la pantalla en el punto de inicio.
            self.page.touchscreen.touch_start(start_x, start_y)
            
            # 2. Mueve el dedo para simular el desplazamiento.
            self.page.touchscreen.touch_move(start_x, end_y)
            
            # 3. Levanta el dedo para finalizar el gesto.
            self.page.touchscreen.touch_end(start_x, end_y)
            
            # Espera a que la animaci√≥n de scroll se complete en la UI
            time.sleep(tiempo_deslizamiento_ms / 1000)

            # --- Medici√≥n de rendimiento: Fin de la acci√≥n ---
            end_time = time.time()
            duration = end_time - start_time
            self.logger.info(f"\n‚úÖ √âXITO: Desplazamiento t√°ctil completado en {duration:.4f} segundos.")
            
        except Error as e:
            error_msg = (
                f"\n‚ùå FALLO (Playwright Error): Ocurri√≥ un error al realizar el scroll t√°ctil."
                f"\nDetalles: {e}"
            )
            self.logger.error(error_msg, exc_info=True)
            self.tomar_captura(f"{nombre_base}_fallo_scroll_tactil_playwright", directorio)
            raise AssertionError(error_msg) from e
        
        except Exception as e:
            error_msg = (
                f"\n‚ùå FALLO (Inesperado): Ocurri√≥ un error inesperado durante el scroll t√°ctil."
                f"\nDetalles: {e}"
            )
            self.logger.critical(error_msg, exc_info=True)
            self.tomar_captura(f"{nombre_base}_fallo_scroll_tactil_inesperado", directorio)
            raise AssertionError(error_msg) from e
        
    # --- Manejadores y funciones para Alertas y Confirmaciones ---

    # Handler para alertas simples (usado con page.once).
    # Este handler captura informaci√≥n de la alerta y la acepta. Integra medici√≥n de rendimiento.
    def _get_simple_alert_handler_for_on(self):
        """
        Retorna una funci√≥n handler (callback) dise√±ada para ser usada con `page.on('dialog', handler)`.
        
        Este handler:
        - Marca una bandera interna (`_alerta_detectada`) a True.
        - Captura el mensaje y el tipo del di√°logo (`dialog.message`, `dialog.type`).
        - Registra informaci√≥n sobre la alerta detectada.
        - Mide el tiempo que tarda la l√≥gica interna del handler en ejecutarse.
        - Acepta autom√°ticamente el di√°logo (`dialog.accept()`).
        - Registra la acci√≥n de aceptar el di√°logo.

        Esta funci√≥n no toma par√°metros de selector o capturas de pantalla directas porque
        es un callback de evento que Playwright invoca.

        Returns:
            callable: Una funci√≥n que toma un objeto `Dialog` como argumento y maneja la alerta.
        """
        # Se reinician las banderas para cada nueva creaci√≥n del handler, √∫til si se usa page.once repetidamente
        self._alerta_detectada = False 
        self._alerta_mensaje_capturado = ""
        self._alerta_tipo_capturado = ""

        def handler(dialog: Dialog):
            """
            Funci√≥n callback interna que se ejecuta cuando Playwright detecta un di√°logo (alerta, confirmaci√≥n, etc.).
            """
            # --- Medici√≥n de rendimiento: Inicio de la ejecuci√≥n del handler ---
            start_time_handler_execution = time.time()
            self.logger.info(f"\n--- [LISTENER START] Procesando di√°logo tipo: '{dialog.type}'. ---")

            try:
                self._alerta_detectada = True
                self._alerta_mensaje_capturado = dialog.message
                self._alerta_tipo_capturado = dialog.type
                
                self.logger.info(f"\n--> [LISTENER ON - Simple Alert] Alerta detectada: Tipo='{dialog.type}', Mensaje='{dialog.message}'")
                
                # Aceptamos el di√°logo. Esto simula hacer clic en "Aceptar" o "OK".
                # Para un 'prompt', puedes pasar un texto: dialog.accept("texto de respuesta")
                dialog.accept() 
                self.logger.info("\n--> [LISTENER ON - Simple Alert] Alerta ACEPTADA.")

            except Exception as e:
                # Captura cualquier error que ocurra dentro del handler.
                # Es crucial aqu√≠ no re-lanzar, ya que podr√≠a romper el listener de Playwright.
                self.logger.error(f"\n‚ùå ERROR en el handler de alerta para '{dialog.type}' (Mensaje: '{dialog.message}'). Detalles: {e}", exc_info=True)
            finally:
                # --- Medici√≥n de rendimiento: Fin de la ejecuci√≥n del handler ---
                end_time_handler_execution = time.time()
                duration_handler_execution = end_time_handler_execution - start_time_handler_execution
                self.logger.info(f"PERFORMANCE: Tiempo de ejecuci√≥n del handler de alerta: {duration_handler_execution:.4f} segundos.")
                self.logger.info("\n--- [LISTENER END] Di√°logo procesado. ---")

        return handler

    # Handler para di√°logos de confirmaci√≥n (usado con page.once).
    # Este handler captura informaci√≥n del di√°logo, realiza una acci√≥n configurable (aceptar/descartar),
    # y registra m√©tricas de rendimiento.
    def _get_confirmation_dialog_handler_for_on(self, accion: str):
        """
        Retorna una funci√≥n handler (callback) dise√±ada para ser usada con `page.on('dialog', handler)`.
        Este handler est√° espec√≠ficamente dise√±ado para di√°logos de tipo 'confirm' o 'prompt',
        permitiendo decidir din√°micamente si se acepta o se descarta el di√°logo.

        Este handler:
        - Marca una bandera interna (`_alerta_detectada`) a True.
        - Captura el mensaje y el tipo del di√°logo (`dialog.message`, `dialog.type`).
        - Registra informaci√≥n sobre el di√°logo detectado.
        - Mide el tiempo que tarda la l√≥gica interna del handler en ejecutarse.
        - Realiza la acci√≥n especificada ('accept' o 'dismiss') en el di√°logo.
        - Registra la acci√≥n tomada.
        - Por defecto, si la acci√≥n no es 'accept' ni 'dismiss', acepta el di√°logo y emite una advertencia.

        Args:
            accion (str): La acci√≥n a realizar en el di√°logo. Puede ser 'accept' para aceptar
                          o 'dismiss' para cancelar/descartar.

        Returns:
            callable: Una funci√≥n que toma un objeto `Dialog` como argumento y maneja el di√°logo.
        """
        # Se reinician las banderas para cada nueva creaci√≥n del handler, √∫til si se usa page.once repetidamente
        self._alerta_detectada = False 
        self._alerta_mensaje_capturado = ""
        self._alerta_tipo_capturado = ""

        def handler(dialog: Dialog):
            """
            Funci√≥n callback interna que se ejecuta cuando Playwright detecta un di√°logo
            (especialmente 'confirm' o 'prompt').
            """
            # --- Medici√≥n de rendimiento: Inicio de la ejecuci√≥n del handler ---
            start_time_handler_execution = time.time()
            self.logger.info(f"\n--- [LISTENER START] Procesando di√°logo de confirmaci√≥n tipo: '{dialog.type}'. ---")

            try:
                self._alerta_detectada = True
                self._alerta_mensaje_capturado = dialog.message
                self._alerta_tipo_capturado = dialog.type
                
                self.logger.info(f"\n--> [LISTENER ON - Din√°mico] Di√°logo detectado: Tipo='{dialog.type}', Mensaje='{dialog.message}'")
                
                if accion == 'accept':
                    # Acepta el di√°logo (equivalente a hacer clic en "OK" o "Aceptar").
                    # Para un prompt, puedes pasar un valor: dialog.accept("mi respuesta")
                    dialog.accept()
                    self.logger.info("\n--> [LISTENER ON - Din√°mico] Di√°logo ACEPTADO.")
                elif accion == 'dismiss':
                    # Descarta/cancela el di√°logo (equivalente a hacer clic en "Cancelar").
                    dialog.dismiss()
                    self.logger.info("\n--> [LISTENER ON - Din√°mico] Di√°logo CANCELADO/DESCARTADO.")
                else:
                    # En caso de acci√≥n no reconocida, se registra una advertencia y se acepta por defecto.
                    self.logger.warning(f"\n--> [LISTENER ON - Din√°mico] Acci√≥n desconocida '{accion}' para el di√°logo '{dialog.type}'. Aceptando por defecto.")
                    dialog.accept()
                    self.logger.info("\n--> [LISTENER ON - Din√°mico] Di√°logo ACEPTADO por defecto debido a acci√≥n inv√°lida.")

            except Exception as e:
                # Captura cualquier error que ocurra dentro del handler.
                # Es crucial aqu√≠ no re-lanzar, ya que podr√≠a romper el listener de Playwright.
                self.logger.error(f"\n‚ùå ERROR en el handler de di√°logo para '{dialog.type}' (Mensaje: '{dialog.message}', Acci√≥n: '{accion}'). Detalles: {e}", exc_info=True)
            finally:
                # --- Medici√≥n de rendimiento: Fin de la ejecuci√≥n del handler ---
                end_time_handler_execution = time.time()
                duration_handler_execution = end_time_handler_execution - start_time_handler_execution
                self.logger.info(f"PERFORMANCE: Tiempo de ejecuci√≥n del handler de di√°logo de confirmaci√≥n: {duration_handler_execution:.4f} segundos.")
                self.logger.info("\n--- [LISTENER END] Di√°logo procesado. ---")

        return handler
    
    # Handler para di√°logos de pregunta (prompt) (usado con page.once).
    # Este handler captura informaci√≥n del di√°logo prompt, introduce un texto opcional,
    # realiza una acci√≥n configurable (aceptar/descartar), y registra m√©tricas de rendimiento.
    def _get_prompt_dialog_handler_for_on(self, input_text: str = "", accion: str = "accept"):
        """
        Retorna una funci√≥n handler (callback) dise√±ada para ser usada con `page.on('dialog', handler)`.
        Este handler est√° espec√≠ficamente dise√±ado para di√°logos de tipo 'prompt', permitiendo
        introducir texto y decidir din√°micamente si se acepta o se descarta el di√°logo.

        Este handler:
        - Marca una bandera interna (`_alerta_detectada`) a True.
        - Captura el mensaje, el tipo del di√°logo y el texto de entrada (`dialog.message`, `dialog.type`, `input_text`).
        - Registra informaci√≥n sobre el di√°logo detectado.
        - Mide el tiempo que tarda la l√≥gica interna del handler en ejecutarse.
        - Realiza la acci√≥n especificada ('accept' o 'dismiss') en el di√°logo.
        - Si la acci√≥n es 'accept' y el tipo de di√°logo es 'prompt', introduce el `input_text`.
        - Registra la acci√≥n tomada.
        - Por defecto, si la acci√≥n no es 'accept' ni 'dismiss', descarta el di√°logo y emite una advertencia.

        Args:
            input_text (str, opcional): El texto a introducir en el campo de entrada del prompt si se acepta.
                                        Por defecto es una cadena vac√≠a "".
            accion (str, opcional): La acci√≥n a realizar en el di√°logo. Puede ser 'accept' para aceptar
                                    o 'dismiss' para cancelar/descartar. Por defecto es 'accept'.

        Returns:
            callable: Una funci√≥n que toma un objeto `Dialog` como argumento y maneja el di√°logo.
        """
        # Se reinician las banderas para cada nueva creaci√≥n del handler
        self._alerta_detectada = False 
        self._alerta_mensaje_capturado = ""
        self._alerta_tipo_capturado = ""
        self._alerta_input_capturado = ""

        def handler(dialog: Dialog):
            """
            Funci√≥n callback interna que se ejecuta cuando Playwright detecta un di√°logo
            (especialmente de tipo 'prompt').
            """
            # --- Medici√≥n de rendimiento: Inicio de la ejecuci√≥n del handler ---
            start_time_handler_execution = time.time()
            self.logger.info(f"\n--- [LISTENER START] Procesando di√°logo de prompt tipo: '{dialog.type}'. ---")

            try:
                self._alerta_detectada = True
                self._alerta_mensaje_capturado = dialog.message
                self._alerta_tipo_capturado = dialog.type
                self._alerta_input_capturado = input_text # Almacena el texto que se intent√≥ introducir

                self.logger.info(f"\n--> [LISTENER ON - Prompt Din√°mico] Di√°logo detectado: Tipo='{dialog.type}', Mensaje='{dialog.message}'.")
                
                if accion == 'accept':
                    if dialog.type == "prompt":
                        # Acepta el prompt e introduce el texto proporcionado.
                        dialog.accept(input_text)
                        self.logger.info(f"\n--> [LISTENER ON - Prompt Din√°mico] Texto '{input_text}' introducido y prompt ACEPTADO.")
                    else:
                        # Si no es un prompt pero se especific√≥ 'accept', lo acepta sin texto.
                        self.logger.warning(f"\n--> [LISTENER ON - Prompt Din√°mico] Se solicit√≥ 'accept' con texto para un di√°logo no-prompt ('{dialog.type}'). Aceptando sin texto.")
                        dialog.accept()
                        self.logger.info("\n--> [LISTENER ON - Prompt Din√°mico] Di√°logo ACEPTADO (sin texto, no es prompt).")
                elif accion == 'dismiss':
                    # Descarta/cancela el di√°logo. El texto de input_text se ignora.
                    dialog.dismiss()
                    self.logger.info("\n--> [LISTENER ON - Prompt Din√°mico] Di√°logo CANCELADO/DESCARTADO.")
                else:
                    # En caso de acci√≥n no reconocida, se registra una advertencia y se descarta por defecto.
                    # Se elige 'dismiss' como valor por defecto m√°s seguro para evitar que el prompt
                    # se quede abierto y bloquee la ejecuci√≥n si la acci√≥n es inv√°lida.
                    self.logger.warning(f"\n--> [LISTENER ON - Prompt Din√°mico] Acci√≥n desconocida '{accion}' para el di√°logo '{dialog.type}'. Descartando por defecto.")
                    dialog.dismiss()
                    self.logger.info("\n--> [LISTENER ON - Prompt Din√°mico] Di√°logo DESCARTADO por defecto debido a acci√≥n inv√°lida.")

            except Exception as e:
                # Captura cualquier error que ocurra dentro del handler.
                # Es crucial aqu√≠ no re-lanzar, ya que podr√≠a romper el listener de Playwright.
                self.logger.error(f"\n‚ùå ERROR en el handler de prompt para '{dialog.type}' (Mensaje: '{dialog.message}', Acci√≥n: '{accion}', Texto: '{input_text}'). Detalles: {e}", exc_info=True)
            finally:
                # --- Medici√≥n de rendimiento: Fin de la ejecuci√≥n del handler ---
                end_time_handler_execution = time.time()
                duration_handler_execution = end_time_handler_execution - start_time_handler_execution
                self.logger.info(f"PERFORMANCE: Tiempo de ejecuci√≥n del handler de di√°logo de prompt: {duration_handler_execution:.4f} segundos.")
                self.logger.info("\n--- [LISTENER END] Di√°logo procesado. ---")

        return handler

    # Handler de eventos para cuando se abre una nueva p√°gina (popup/nueva pesta√±a).
    # Este handler se encarga de detectar y registrar informaci√≥n sobre nuevas p√°ginas,
    # y tambi√©n mide el tiempo de procesamiento interno.
    def _on_new_page(self, page: Page):
        """
        Manejador de eventos (callback) para detectar nuevas p√°ginas o ventanas emergentes (popups)
        que se abren, por ejemplo, al hacer clic en un enlace con `target="_blank"`.
        
        Este handler:
        - Marca una bandera interna (`_popup_detectado`) a True.
        - Almacena la referencia al objeto `Page` de la nueva ventana.
        - Captura la URL y el t√≠tulo de la nueva p√°gina.
        - A√±ade la nueva p√°gina a una lista de todas las p√°ginas detectadas.
        - Registra informaci√≥n sobre la nueva p√°gina detectada.
        - Mide el tiempo que tarda la l√≥gica interna del handler en ejecutarse.

        Args:
            page (Page): El objeto `Page` de Playwright que representa la nueva ventana/pesta√±a abierta.
                         Este es proporcionado autom√°ticamente por Playwright cuando se dispara el evento.
        """
        # --- Medici√≥n de rendimiento: Inicio de la ejecuci√≥n del handler ---
        start_time_handler_execution = time.time()
        self.logger.info("\n--- [LISTENER START] Procesando evento de nueva p√°gina. ---")

        try:
            self._popup_detectado = True
            self._popup_page = page
            self._popup_url_capturado = page.url
            # El title() puede requerir una peque√±a espera si la p√°gina no ha cargado lo suficiente.
            # Sin embargo, para un handler que debe ser r√°pido, se asume que estar√° disponible.
            # Si el t√≠tulo no se obtiene inmediatamente, podr√≠a ser None o vac√≠o.
            self._popup_title_capturado = page.title() 
            self._all_new_pages_opened_by_click.append(page) # A√±adir la nueva p√°gina a la lista

            self.logger.info(f"\nüåê Nueva p√°gina (popup/pesta√±a) detectada. URL: '{page.url}', T√≠tulo: '{page.title()}'")
            # Opcional: Si solo te interesa la primera popup o una espec√≠fica, podr√≠as manejarlo aqu√≠.
            # Por ahora, solo la a√±adimos a la lista para seguimiento.

        except Exception as e:
            # Es crucial capturar excepciones en handlers para evitar que Playwright deshabilite el listener.
            self.logger.error(f"\n‚ùå ERROR en el handler de nueva p√°gina. Detalles: {e}", exc_info=True)
        finally:
            # --- Medici√≥n de rendimiento: Fin de la ejecuci√≥n del handler ---
            end_time_handler_execution = time.time()
            duration_handler_execution = end_time_handler_execution - start_time_handler_execution
            self.logger.info(f"PERFORMANCE: Tiempo de ejecuci√≥n del handler de nueva p√°gina: {duration_handler_execution:.4f} segundos.")
            self.logger.info("\n--- [LISTENER END] Evento de nueva p√°gina procesado. ---")
        
    